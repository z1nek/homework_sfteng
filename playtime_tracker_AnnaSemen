import time
import psutil
from datetime import datetime
import threading
import telebot
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
TARGET_CHAT = os.getenv('CHAT_ID')

bot = telebot.TeleBot(TOKEN)

# –ò–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
tracked_games = ['game.exe', 'steam.exe', 'minecraft.exe']

# –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
thread_lock = threading.Lock()
active_sessions = {}
accumulated_times = {}

def send_telegram_message(text):
    if TARGET_CHAT:
        try:
            bot.send_message(TARGET_CHAT, text)
        except Exception as error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error}")

def seconds_to_hms(seconds):
    hrs = seconds // 3600
    mins = (seconds % 3600) // 60
    secs = seconds % 60
    return f"{int(hrs):02d}:{int(mins):02d}:{int(secs):02d}"

def monitor_processes():
    while True:
        try:
            running_games = set()
            for process in psutil.process_iter(['name']):
                proc_name = process.info['name']
                if proc_name in tracked_games:
                    running_games.add(proc_name)
                    with thread_lock:
                        if proc_name not in active_sessions:
                            active_sessions[proc_name] = datetime.now()
                            msg = f"üéÆ –ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∏–≥—Ä–∞: {proc_name} –≤ {active_sessions[proc_name].strftime('%H:%M:%S')}"
                            print(msg)
                            send_telegram_message(msg)

            with thread_lock:
                ended_games = set(active_sessions.keys()) - running_games
                for game in ended_games:
                    end_time = datetime.now()
                    session_duration = (end_time - active_sessions[game]).total_seconds()
                    accumulated_times[game] = accumulated_times.get(game, 0) + session_duration
                    msg = (f"‚èπÔ∏è –ò–≥—Ä–∞ {game} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {end_time.strftime('%H:%M:%S')}\n"
                           f"–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {seconds_to_hms(session_duration)}")
                    print(msg)
                    send_telegram_message(msg)
                    del active_sessions[game]

            time.sleep(5)
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {ex}")
            time.sleep(10)

def compose_statistics():
    with thread_lock:
        if not accumulated_times and not active_sessions:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è -_- –ò–≥—Ä—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å! –£—Ä–∞."
        result = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n"
        if accumulated_times:
            result += "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏:\n"
            for game, total_sec in accumulated_times.items():
                result += f"‚Ä¢ {game}: {seconds_to_hms(total_sec)}\n"
        if active_sessions:
            result += "\n–°–µ–π—á–∞—Å –∏–≥—Ä–∞—é—Ç:\n"
            now = datetime.now()
            for game, start_time in active_sessions.items():
                elapsed = (now - start_time).total_seconds()
                result += f"‚Ä¢ {game}: {seconds_to_hms(elapsed)} (–∞–∫—Ç–∏–≤–Ω–∞)\n"
        return result

@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_msg = (
        "–ò–≥—Ä–∞–µ—à—å??? –•–∞-—Ö–∞-—Ö–∞-—Ö–∞, –∏–¥–∏ –ø–æ—Ç—Ä–æ–≥–∞–π —Ç—Ä–∞–≤—É... .\n\n"
        "–õ–∞–¥–Ω–æ, –¥–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è, –º–∏–ª—ã–π uwu:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–≥—Ä—ã\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∏ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è."
    )
    bot.reply_to(message, welcome_msg)
